"""import moduls"""
import telebot
from telebot import types
import sqlite3
import GeneralMessages
from dorama_and_anime import Dorama, Anime
import Api


class DoranimeBot:
    def __init__(self, token: str):
        """initialization

        :param token: TeleBot token
        """
        self.bot = telebot.TeleBot(token)
        self.user_data = {}
        self.conn = sqlite3.connect('Serials.db', check_same_thread=False)
        self.create_tables()
        self.load_user_data()

        """Setting up commands"""
        self.bot.message_handler(commands=['start'])(self.start)
        self.bot.message_handler(commands=['help'])(self.help)
        self.bot.message_handler(content_types=['text'])(self.func)

    def start(self, message):
        """

        :param message: user's message
        :return: response to the user
        """
        chat_id = message.chat.id
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {'doramas': [], 'anime': []}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üå∏ –ê–Ω–∏–º–µ")
        btn2 = types.KeyboardButton("üì∫ –î–æ—Ä–∞–º—ã")
        btn3 = types.KeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        btn4 = types.KeyboardButton("‚ùì –ß—Ç–æ —è —É–º–µ—é?")
        markup.add(btn1, btn2, btn3, btn4)
        self.bot.send_message(message.chat.id, GeneralMessages.START_MSG, reply_markup=markup)

    def help(self, message):
        self.bot.send_message(message.chat.id, GeneralMessages.HELP_MSG)

    def func(self, message):
        """Main menu

        :param message: user's message
        :return: response to the user
        """
        if (message.text == "‚ùì –ß—Ç–æ —è —É–º–µ—é?"):
            self.bot.send_message(message.chat.id, GeneralMessages.HELP_MSG)
        elif (message.text == "üå∏ –ê–Ω–∏–º–µ"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé")
            btn2 = types.KeyboardButton("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –∂–∞–Ω—Ä—É üé≠")
            btn3 = types.KeyboardButton("–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –≥–æ–¥—É üéØ")
            btn4 = types.KeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üí°")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå")
            markup.add(btn1, btn2, btn3, btn4, back)
            self.bot.send_message(message.chat.id, text="–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üå∏ –ê–Ω–∏–º–µ", reply_markup=markup)

        elif (message.text == "üì∫ –î–æ—Ä–∞–º—ã"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé")
            btn2 = types.KeyboardButton("–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∂–∞–Ω—Ä—É üé≠")
            btn3 = types.KeyboardButton("–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –≥–æ–¥—É üéØ")
            btn4 = types.KeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞ üí°")
            btn5 = types.KeyboardButton("–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∞–∫—Ç–µ—Ä—É üíé")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå")
            markup.add(btn1, btn2, btn3, btn4, btn5, back)
            self.bot.send_message(message.chat.id, text="–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üì∫ –î–æ—Ä–∞–º—ã", reply_markup=markup)

        elif (message.text == "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–ú–æ–π —Å–ø–∏—Å–æ–∫ üìú")
            btn2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üìù")
            btn3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üö´")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå")
            markup.add(btn1, btn2, btn3, back)
            self.bot.send_message(message.chat.id, text="–≤—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", reply_markup=markup)


        elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üå∏ –ê–Ω–∏–º–µ")
            btn2 = types.KeyboardButton("üì∫ –î–æ—Ä–∞–º—ã")
            btn3 = types.KeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
            btn4 = types.KeyboardButton("‚ùì –ß—Ç–æ —è —É–º–µ—é?")
            markup.add(btn1, btn2, btn3, btn4)
            self.bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

        elif (message.text == "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé"):
            msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
            self.bot.register_next_step_handler(msg, self.process_title_search)

        elif (message.text == "–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé"):
            msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
            self.bot.register_next_step_handler(msg, self.process_title_search)

        elif (message.text == "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –∂–∞–Ω—Ä—É üé≠"):
            self.type = '–∞–Ω–∏–º–µ'
            msg = self.bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–µ –∂–∞–Ω—Ä—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ —É–∫–∞–∂–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)')
            self.bot.register_next_step_handler(msg, self.process_genre_search)

        elif (message.text == "–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∂–∞–Ω—Ä—É üé≠"):
            self.type = '–¥–æ—Ä–∞–º–∞'
            msg = self.bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–µ –∂–∞–Ω—Ä—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ —É–∫–∞–∂–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)')
            self.bot.register_next_step_handler(msg, self.process_genre_search)

        elif (message.text == "–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∞–∫—Ç–µ—Ä—É üíé"):
            msg = self.bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ —É–∫–∞–∂–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)')
            self.bot.register_next_step_handler(msg, self.process_actor_search)

        elif (message.text == "–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –≥–æ–¥—É üéØ"):
            self.type = '–¥–æ—Ä–∞–º–∞'
            msg = self.bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ (–µ—Å–ª–∏ –≤–≤–æ–¥–∏—à—å –¥–∏–∞–ø–∞–∑–æ–Ω, —Ç–æ –≤–≤–æ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–≥–æ–¥)')
            self.bot.register_next_step_handler(msg, self.process_year_search)

        elif (message.text == "–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –≥–æ–¥—É üéØ"):
            self.type = '–∞–Ω–∏–º–µ'
            msg = self.bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ (–µ—Å–ª–∏ –≤–≤–æ–¥–∏—à—å –¥–∏–∞–ø–∞–∑–æ–Ω, —Ç–æ –≤–≤–æ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–≥–æ–¥)')
            self.bot.register_next_step_handler(msg, self.process_year_search)

        elif (message.text == "–°–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞ üí°"):
            type = '–¥–æ—Ä–∞–º–∞'
            msg = self.bot.send_message(message.chat.id, '–î–µ—Ä–∂–∏ —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Ä–∞–º—É, –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç–µ–±–µ –æ–Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è üòä\n')
            information = Api.random_dorama(type)
            self.bot.send_message(message.chat.id, information)

        elif (message.text == "–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üí°"):
            type = '–∞–Ω–∏–º–µ'
            msg = self.bot.send_message(message.chat.id, '–î–µ—Ä–∂–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ, –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç–µ–±–µ –æ–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è üòä\n')
            information = Api.random_dorama(type)
            self.bot.send_message(message.chat.id, information)

        elif (message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üìù"):
            msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å: –∞–Ω–∏–º–µ –∏–ª–∏ –¥–æ—Ä–∞–º—É')
            self.bot.register_next_step_handler(msg, self.add_serial)

        elif (message.text == "–ú–æ–π —Å–ø–∏—Å–æ–∫ üìú"):
            msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å: –∞–Ω–∏–º–µ –∏–ª–∏ –¥–æ—Ä–∞–º—ã')
            self.bot.register_next_step_handler(msg, self.list_serial)

        elif (message.text == "–£–¥–∞–ª–∏—Ç—å –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üö´"):
            msg = self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å: –∞–Ω–∏–º–µ –∏–ª–∏ –¥–æ—Ä–∞–º—É')
            self.bot.register_next_step_handler(msg, self.delete_serial)


        else:
            self.bot.send_message(message.chat.id,
                             text="‚öôÔ∏è –ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help")

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS doramas (
                            chat_id INTEGER,
                            name TEXT, 
                            comment TEXT)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS anime (
                            chat_id INTEGER,
                            name TEXT, 
                            comment TEXT)''')
        self.conn.commit()

    def load_user_data(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM doramas')
        doramas = cursor.fetchall()
        cursor.execute('SELECT * FROM anime')
        anime = cursor.fetchall()

        for chat_id, name, comments in doramas:
            if chat_id not in self.user_data:
                self.user_data[chat_id] = {'doramas': [], 'anime': []}
            self.user_data[chat_id]['doramas'].append(Dorama(name, comments))

        for chat_id, name, comments in anime:
            if chat_id not in self.user_data:
                self.user_data[chat_id] = {'doramas': [], 'anime': []}
            self.user_data[chat_id]['anime'].append(Anime(name, comments))

    def add_serial(self, message):
        """adding a dorama or anime to the database

        :param message: dorama or anime
        :return:
        """
        chat_id = message.chat.id
        serial = message.text
        msg = self.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
        self.bot.register_next_step_handler(msg, self.process_name_serial, chat_id, serial)

    def process_name_serial(self, message, chat_id, serial):
        name = message.text
        if (serial == '–¥–æ—Ä–∞–º–∞') or (serial == '–¥–æ—Ä–∞–º—ã'):
            self.user_data[chat_id]['current_dorama_name'] = name
        else:
            self.user_data[chat_id]['current_anime_name'] = name
        msg = self.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–µ—Ä–∏–∞–ª—É')
        self.bot.register_next_step_handler(msg, self.process_comment_serial, chat_id, serial)

    def process_comment_serial(self, message, chat_id, serial):
        comment = message.text
        if (serial == '–¥–æ—Ä–∞–º–∞') or (serial == '–¥–æ—Ä–∞–º—ã'):
            name = self.user_data[chat_id].pop('current_dorama_name')
            self.user_data[chat_id]['doramas'].append(Dorama(name, comment))
            self.save_serial(chat_id, name, comment, serial)
        else:
            name = self.user_data[chat_id].pop('current_anime_name')
            self.user_data[chat_id]['anime'].append(Anime(name, comment))
            self.save_serial(chat_id, name, comment, serial)
        self.bot.send_message(chat_id, f"–í —Ä–∞–∑–¥–µ–ª {serial} –¥–æ–±–∞–≤–ª–µ–Ω '{name}' —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {comment}")

    def save_serial(self, chat_id, name, comment, serial):
        cursor = self.conn.cursor()
        if (serial == '–¥–æ—Ä–∞–º–∞') or (serial == '–¥–æ—Ä–∞–º—ã'):
            cursor.execute('INSERT INTO doramas (chat_id, name, comment) VALUES (?, ?, ?)',
                           (chat_id, name, comment))
        else:
            cursor.execute('INSERT INTO anime (chat_id, name, comment) VALUES (?, ?, ?)',
                           (chat_id, name, comment))
        self.conn.commit()

    def delete_serial(self, message):
        """deleting a dorama or anime from the database

        :param message: dorama or anime
        :return:
        """
        chat_id = message.chat.id
        serial = message.text
        msg = self.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:')
        self.bot.register_next_step_handler(msg, self.process_delete_serial, chat_id, serial)

    def process_delete_serial(self, message, chat_id, serial):
        name = message.text
        self.user_data[chat_id]['doramas'] = [dorama for dorama in self.user_data[chat_id]['doramas'] if dorama.name != name]
        self.delete_serial_from_db(chat_id, name, serial)
        self.bot.send_message(chat_id, f'{serial} {name} —É–¥–∞–ª—ë–Ω–∞')

    def delete_serial_from_db(self, chat_id, name, serial):
        cursor = self.conn.cursor()
        if (serial == '–¥–æ—Ä–∞–º–∞') or (serial == '–¥–æ—Ä–∞–º—ã'):
            cursor.execute('DELETE FROM doramas WHERE chat_id = ? AND name = ?', (chat_id, name))
        else:
            cursor.execute('DELETE FROM anime WHERE chat_id = ? AND name = ?', (chat_id, name))
        self.conn.commit()

    def list_serial(self, message):
        """displaying a list of favorites

        :param message:
        :return:
        """
        chat_id = message.chat.id
        serial = message.text
        valid_serials = []
        if (serial == '–¥–æ—Ä–∞–º–∞') or (serial == '–¥–æ—Ä–∞–º—ã'):
            doramas = self.user_data[chat_id]['doramas']
            self.user_data[chat_id]['doramas'] = valid_serials
            if not doramas:
                self.bot.send_message(chat_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ü•∫")
            else:
                doramas_str = "\n".join(str(dorama) for dorama in doramas)
                self.bot.send_message(chat_id, f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üî•:\n{doramas_str}")
        else:
            anime = self.user_data[chat_id]['anime']
            self.user_data[chat_id]['doramas'] = valid_serials
            if not anime:
                self.bot.send_message(chat_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ü•∫")
            else:
                anime_str = "\n".join(str(anima) for anima in anime)
                self.bot.send_message(chat_id, f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üî•:\n{anime_str}")

    def process_title_search(self, message):
        chat_id = message.chat.id
        title = message.text
        information = Api.title_search(title)
        self.bot.send_message(chat_id, information)

    def process_genre_search(self, message):
        chat_id = message.chat.id
        genre = message.text
        information = Api.genre_search(genre, self.type)
        self.bot.send_message(chat_id, information)

    def process_actor_search(self, message):
        chat_id = message.chat.id
        title = message.text
        information = Api.title_search(title)
        self.bot.send_message(chat_id, information)

    def process_year_search(self, message):
        chat_id = message.chat.id
        year = message.text
        information = Api.year_search(year, self.type)
        self.bot.send_message(chat_id, information)

    def run(self):
        self.bot.infinity_polling()
